# coding:utf-8
# *******************************************************************
# * Copyright 2021-2080 evilbinary
# * 作者: evilbinary on 01/01/20
# * 邮箱: rootdebug@163.com
# ********************************************************************
import os
import platform 
plt = platform.system()

Import('env')

AddOption(
    '--run',
    dest='run',
    nargs=1,
    type='string',
    action='store',
    metavar='DIR',
    help='run image',
)
AddOption(
    '--build',
    dest='build',
    nargs=1,
    type='string',
    action='store',
    metavar='DIR',
    help='build image',
)
env = env.Clone(
  run=GetOption('run'),
  build=GetOption('build'),
  ENV = os.environ,
  PATH= [os.environ['PATH'],'/opt/local/bin' ],
  )
# export PATH=$PATH:/Volumes/android/u-boot/scripts/dtc/:/Volumes/android/u-boot/tools/
env.AppendENVPath('PATH', ['/Volumes/android/u-boot/scripts/dtc/','/Volumes/android/u-boot/tools/'])
env.KernelSize(['size'],['../duck/init/kernel'])


run_qemu_cmd=''
debug_qemu_cmd=''


boot_loader_path='~/dev/c/esp/esp-idf/examples/custom_bootloader/bootloader_override/build/'

kernel_image='image/duck.img'

if env.get('SINGLE_KERNEL'):
  kernel_image= 'duck/init/kernel.elf'

if env.get('ARCHTYPE')=='x86':
  if env.get('ARCH')=='x86-duck':
    run_qemu_cmd='boot/x86-duck/init.elf'
    debug_qemu_cmd='ggdb '+run_qemu_cmd
    pass
  else:
    run_qemu_cmd='qemu-system-i386 -smp 1,sockets=1 -m 512M -name YiYiYa -rtc base=localtime,clock=host -boot a  -fda $SOURCE -serial stdio -D ./qemu.log  -drive id=disk,file=image/disk.img,format=raw,if=none -device ahci,id=ahci -device ide-hd,drive=disk,bus=ahci.0 -device sb16 -net nic,model=e1000 ' #-d in_asm -d cpu_reset -d in_asm,int,mmu -chardev socket,id=monitor,path=monitor.sock,server,nowait -monitor chardev:monitor 
    run_qemu_cmd =run_qemu_cmd+' -monitor tcp:127.0.0.1:55555,server,nowait'
    
    debug_qemu_cmd = 'qemu-system-i386 -smp 2,sockets=1 -m 512M  -name YiYiYa -rtc base=localtime -boot a -S -s -fda $SOURCE -serial stdio  -D ./qemu.log  -drive id=disk,file=image/disk.img,format=raw,if=none -device ahci,id=ahci -device ide-hd,drive=disk,bus=ahci.0 -device sb16  -net nic,model=e1000 '  #-d in_asm -d cpu_reset -d in_asm,int,mmu
    debug_qemu_cmd =debug_qemu_cmd+' -monitor tcp:127.0.0.1:55555,server,nowait'
    pass
elif env.get('ARCHTYPE') =='arm':
  if env['ARCH'] =='armv7':
    run_qemu_cmd='qemu-system-gnuarmeclipse -name YiYiYa --verbose --verbose --board STM32F429I-Discovery --mcu STM32F429ZITx   -rtc base=localtime -kernel duck/init/kernel.elf  -serial stdio  -D ./qemu.log -d unimp,guest_errors --semihosting-config enable -d in_asm,int,mmu,cpu_reset' #-d in_asm -d cpu_reset -d in_asm,int,mmu -d   -drive if=sd,id=sd0,format=raw,file=image/disk.img #-d in_asm -d cpu_reset -d in_asm,int,mmu
    debug_qemu_cmd = run_qemu_cmd+ ' -S -s'
  elif env.get('PLATFORM') in ['orangepi-pc','cubieboard2'] :
    run_qemu_cmd='qemu-system-arm -name YiYiYa -M orangepi-pc -rtc base=localtime -kernel %s  -serial stdio   -D ./qemu.log -drive if=sd,id=sd0,format=raw,file=image/disk.img -d in_asm,int,mmu,cpu_reset,guest_errors,strace'%(kernel_image) #-d in_asm -d cpu_reset -d in_asm,int,mmu,cpu_reset
    debug_qemu_cmd =run_qemu_cmd+' -S -s -monitor tcp:127.0.0.1:55555,server,nowait'
  else:
    run_qemu_cmd='qemu-system-arm -name YiYiYa -M raspi2b  -rtc base=localtime -kernel %s  -serial stdio   -D ./qemu.log -drive if=sd,id=sd0,format=raw,file=image/disk.img '%(kernel_image) #-d in_asm -d cpu_reset -d in_asm,int,mmu
    # run_qemu_cmd =run_qemu_cmd+' -monitor tcp:127.0.0.1:55555,server,nowait'
    # run_qemu_cmd =run_qemu_cmd+' -chardev socket,id=monitor,path=monitor.sock,server,nowait -monitor chardev:monitor'
    debug_qemu_cmd = run_qemu_cmd +' -S -s'
elif env.get('ARCHTYPE')=='xtensa':
  run_qemu_cmd='~/dev/qemu-esp32/build/qemu-system-xtensa -nographic -M esp32 -drive file=image/duck.img,if=mtd,format=raw -s -serial stdio -chardev socket,id=monitor,path=monitor.sock,server,nowait -monitor chardev:monitor  -D ./qemu.log -drive if=sd,id=sd0,format=raw,file=image/disk.img -d in_asm -d cpu_reset -d in_asm,int,mmu' #-d in_asm -d cpu_reset -d in_asm,int,mmu
  debug_qemu_cmd = run_qemu_cmd +' -S '
elif env.get('ARCHTYPE')=='general':
  run_qemu_cmd ='duck/init/kernel.elf'
  debug_qemu_cmd = 'lldb '+run_qemu_cmd
elif env.get('ARCHTYPE')=='riscv':
  bios='none'
  if env.get('SINGLE_KERNEL'):
    bios='default'
  run_qemu_cmd='qemu-system-riscv32 -smp 1 -name YiYiYa -M virt -bios %s -rtc base=localtime -kernel %s -drive id=disk,file=image/disk.img -serial stdio -D ./qemu.log   '%(bios,kernel_image) #-serial stdio -d in_asm -d cpu_reset -d in_asm,int,mmu
  debug_qemu_cmd =run_qemu_cmd+' -S -s -monitor tcp:127.0.0.1:55555,server,nowait'
else:
  print('no support run')

def build_duck_image():
  print('build duck image')
  if env.get('ARCHTYPE')=='x86':
    env.Command('duck.img', 
      [
      ''
      '../boot/x86/boot',
      '../boot/x86/init.bin',
      '../duck/init/kernel' ],
      [
        'dd if=/dev/zero bs=512 count=2880 conv=notrunc of=$TARGET',
        'dd if=${SOURCES[0]} bs=512 count=1 conv=notrunc of=$TARGET',
        'dd if=${SOURCES[1]} bs=512 count=11 seek=1  conv=notrunc of=$TARGET',
        'dd if=${SOURCES[2]} bs=512 count=%s seek=12  conv=notrunc of=$TARGET'%(env.get('KERNEL_SIZE'))
    ])
  elif env.get('ARCHTYPE') =='arm':
      if env.get('PLATFORM')=='v3s':
        env.Command('duck.img',[
          ''
          '../boot/arm/init.bin',
          '../duck/init/kernel'
        ],[
          'dd if=/dev/zero bs=512 count=2880 conv=notrunc of=$TARGET',
          'tools/mksunxi/mksunxiboot ${SOURCES[0]} boot/arm/init-spl.bin',
          'dd if=boot/arm/init-spl.bin bs=512 count=11 seek=0 conv=notrunc of=$TARGET',
          'dd if=${SOURCES[1]} bs=512 count=11 seek=12 conv=notrunc of=$TARGET',
        ])
      elif env['PLATFORM']=='stm32f4xx':
        env.Command('duck.img', 
        [
        ''
        '../duck/init/kernel' 
        ],
        [
         
      ])
      else:
        env.Command('duck.img', 
        [
        ''
        '../boot/arm/init.bin',
        '../duck/init/kernel' 
        ],
        [
          'dd if=/dev/zero bs=512 count=2880 conv=notrunc of=$TARGET',
          'dd if=${SOURCES[0]} bs=512 count=11 seek=0 conv=notrunc of=$TARGET',
          'dd if=${SOURCES[1]} bs=512 count=%s seek=12  conv=notrunc of=$TARGET'%(env.get('KERNEL_SIZE'))
      ])
  elif env.get('ARCHTYPE')=='xtensa':
    if env.get('SINGLE_KERNEL'):
      env.Command('esp32', 
      [ 
        '../duck/init/kernel.elf',
        '../duck/init/kernel.bin'
      ],
      [
      'source ~/dev/c/esp/esp-idf/export.sh && esptool.py --chip esp32 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o duck/init/kernel.bin  ${SOURCES[0]}',
      'source ~/dev/c/esp/esp-idf/export.sh && esptool.py --chip esp32 merge_bin --fill-flash-size 4MB -o image/duck.img 0x1000 %s/bootloader/bootloader.bin 0x8000 %s/partition_table/partition-table.bin 0x10000 duck/init/kernel.bin'%(boot_loader_path,boot_loader_path),
      ])
    else:
      env.Command('esp32', 
      [ '../boot/xtensa/init.elf',
        '../duck/init/kernel'
      ],
      [
        'source ~/dev/c/esp/esp-idf/export.sh && esptool.py --chip esp32 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o boot/xtensa/init.bin  ${SOURCES[0]}',
      # 'esptool.py --chip esp32 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o duck/init/kernel.bin  ${SOURCES[1]}',
      'source ~/dev/c/esp/esp-idf/export.sh && esptool.py --chip esp32 merge_bin --fill-flash-size 4MB -o image/flash_image.bin 0x1000 boot/xtensa/init.bin 0x10000 duck/init/kernel',
      ])
  elif env.get('ARCHTYPE')=='riscv':
    env.Command('duck.img', 
        [
        ''
        '../boot/riscv/init.bin',
        '../duck/init/kernel' 
        ],
        [
          'dd if=/dev/zero bs=512 count=2880 conv=notrunc of=$TARGET',
          'dd if=${SOURCES[0]} bs=512 count=11 seek=0 conv=notrunc of=$TARGET',
          'dd if=${SOURCES[1]} bs=512 count=%s seek=12  conv=notrunc of=$TARGET'%(env.get('KERNEL_SIZE'))
      ])
  else:
    print('not support build duck image')

def build_duck_fit():
  if env.get('ARCHTYPE') =='arm':
    env.Command('duck.fit', 
    ['kernel-'+env.get('PLATFORM')+'.its',
    '../duck/init/kernel.elf', 
    '../boot/arm/init.bin'
    ],
    ['mkimage -f ${SOURCES[0]} $TARGET'
  ])
  elif env.get('ARCHTYPE')=='x86':
    env.Command('duck.fit', 
      ['kernel.its',
      '../duck/init/kernel.bin', 
      '../boot/x86/init.bin'
      ],
      ['mkimage -f ${SOURCES[0]} $TARGET'
    ])


def build_disk():
  if not os.path.exists('disk.img'):
    print('make disk.img')
    env.Execute('qemu-img create disk.img 256m && mkfs.vfat disk.img')

def run_duck():
  print('run start')
  build_duck_image()
  build_disk()
  env.Command('qemu', 'duck.img',run_qemu_cmd)

def debug_duck():
  print('debug start')
  build_duck_image()
  build_disk()
  env.Command('qemu','duck.img',debug_qemu_cmd)

if env.get('build')=='uImage':
  if env.get('ARCHTYPE')=='x86':
    env.Command('uImage.img', 
      ['../duck/init/kernel' ],
      ['mkimage -n YiYiYa -A x86 -O u-boot -T kernel -C none -a 0x30008000 -e 0x30008000 -d ${SOURCES[0]} $TARGET'
    ])
  elif env.get('ARCHTYPE') =='arm':
    env.Command('uImage.img', 
      ['../duck/init/kernel' ],
      ['mkimage -n YiYiYa -A arm -O u-boot -T kernel -C none -a 0x41000000 -e 0x1000000 -d ${SOURCES[0]} $TARGET'
    ])

elif env.get('build')=='fit':
  build_duck_fit()

if env.get('build')=='duck':
  build_duck_image()
if env.get('run')=='bochs' or env.get('run')=='b':
  build_duck_image()
  env.Command('bochs', 'duck.img','bochs -q -f ./bochsrc')
elif env.get('run')=='qemu' or env.get('run')=='q':
  run_duck()
elif env.get('run')=='debug' or env.get('run')=='d':
  debug_duck()

elif env.get('run')=='v3s':
  build_duck_fit()
  env.Command('v3s', 'duck.fit','~/dev/c/sunxi-tools/sunxi-fel version uboot ~/dev/c/u-boot-v3s/u-boot-sunxi-with-spl.bin  write 0x41000000 ~/dev/c/YiYiYa/image/duck.fit')
elif env.get('run')=='cubieboard2':
  build_duck_fit()
  env.Command('cubieboard2', 'duck.fit','~/dev/c/sunxi-tools/sunxi-fel version uboot ~/dev/c/u-boot-sunxi/u-boot-sunxi-with-spl.bin  write 0x42000000 ~/dev/c/YiYiYa/image/duck.fit')
elif env.get('run')=='stm32f4xx':
  # build_duck_fit()
  env.Command('stm32f4xx', '../duck/init/kernel.bin','JLink.exe -device stm32f401cc -speed 4000 -CommanderScript xconfig/stm32f4xx.jlink')
  

elif env.get('run')=='esp32':
  if env.get('SINGLE_KERNEL'):
    env.Command('esp32', 
      [ 
        '../duck/init/kernel.elf',
        '../duck/init/kernel.bin'
      ],
      [
      'esptool.py --chip esp32 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o duck/init/kernel.bin  ${SOURCES[0]}',
      'esptool.py --chip esp32 --port /dev/tty.wchusbserial14140 --baud 460800 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 %s/bootloader/bootloader.bin 0x8000 %s/partition_table/partition-table.bin 0x10000 duck/init/kernel.bin'%(boot_loader_path,boot_loader_path),
      'idf_monitor.py -p /dev/tty.wchusbserial14140 -b 115200 --toolchain-prefix xtensa-esp32-elf- --target esp32 --revision 0  duck/init/kernel.elf'   #boot/xtensa/init.elf
    ])
  else:
    env.Command('esp32', 
      [ '../boot/xtensa/init.elf',
        '../duck/init/kernel.elf',
        '../duck/init/kernel.bin'
      ],
      ['esptool.py --chip esp32 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o boot/xtensa/init.bin  ${SOURCES[0]}',
      'esptool.py --chip esp32 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o duck/init/kernel.bin  ${SOURCES[1]}',
      'esptool.py --chip esp32 --port /dev/tty.wchusbserial14140 --baud 460800 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 boot/xtensa/init.bin 0x10000 duck/init/kernel.bin',
      'idf_monitor.py -p /dev/tty.wchusbserial14140 -b 115200 --toolchain-prefix xtensa-esp32-elf- --target esp32 --revision 0  duck/init/kernel.elf'   #boot/xtensa/init.elf
    ])
  
elif env.get('run')=='dmulator':
  print('run start')
  env.Command('dmulator', 'duck.img',run_qemu_cmd)
elif env.get('run')=='dd':
  print('dbg start')
  env.Command('dmulator', 'duck.img',debug_qemu_cmd)